<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on KID's Blog</title><link>https://blog.kid7.club/categories/python/</link><description>Recent content in Python on KID's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.kid7.club/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>時間的四捨五入（R、Python Pandas）</title><link>https://blog.kid7.club/p/%E6%99%82%E9%96%93%E7%9A%84%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5-r-python-pandas/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.kid7.club/p/%E6%99%82%E9%96%93%E7%9A%84%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5-r-python-pandas/</guid><description>資料處理時，常需要將時間轉換為接近的整點，
如：9:47 轉換為 10:00；14:03 轉換為 14:00
或是以 15 分鐘為區間，
如：9:47 轉換為 9:45、5:23 轉換為 5:30
以下分別介紹 R 與 Python 兩種語言的處理方式
R 使用 lubridate 套件中的 round_date（四捨五入）、floor_date（向下取整）、ceiling_date（向上取整）
三者皆可依照需求指定時間精度，以下範例分別以 5 分鐘、10 分鐘、1 小時取接近值
1 2 3 4 5 6 7 8 9 10 11 12 13 x &amp;lt;- as.POSIXct(&amp;#34;2017-10-11 09:49:03&amp;#34;) lubridate::round_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 lubridate::floor_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:45:00 lubridate::floor_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:40:00 lubridate::floor_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 lubridate::ceiling_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 Python Python 本身較難處理這類情況，因此會使用 Pandas 套件中 pandas.</description></item><item><title>Python 測試程式碼片段執行時間</title><link>https://blog.kid7.club/p/python-%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5%E5%9F%B7%E8%A1%8C%E6%99%82%E9%96%93/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.kid7.club/p/python-%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5%E5%9F%B7%E8%A1%8C%E6%99%82%E9%96%93/</guid><description>測試 Python 的程式碼片段實際執行所需秒數
1 2 3 4 5 6 7 import time start = time.perf_counter() # Do something end = time.perf_counter() elapsed = end - start print(&amp;#34;elapsed:&amp;#34;, elapsed) 參考資料 time — Time access and conversions — Python 3 documentation</description></item><item><title>Anaconda 安裝筆記</title><link>https://blog.kid7.club/p/anaconda-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</link><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.kid7.club/p/anaconda-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</guid><description>流程 下載 Anaconda
https://www.anaconda.com/distribution/
1 wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh 安裝 Anaconda
安裝路徑：/opt/anaconda
不使用 Conda init 初始化
1 sudo bash ./Anaconda3-2019.07-Linux-x86_64.sh 建立 Anaconda 使用者
1 sudo useradd anaconda 設定資料夾權限
1 2 3 sudo chown -R anaconda:anaconda /opt/anaconda sudo chmod -R go-w /opt/anaconda sudo chmod -R go+rX /opt/anaconda 設定 PATH
（給使用者：）在 /etc/environment 的 PATH 新增 /opt/anaconda/bin</description></item><item><title>Ubuntu 16.04/CUDA 10.0 安裝筆記</title><link>https://blog.kid7.club/p/ubuntu-16.04-cuda-10.0-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</link><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.kid7.club/p/ubuntu-16.04-cuda-10.0-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</guid><description>流程 安裝 NVIDIA 顯卡驅動與相關套件
https://www.tensorflow.org/install/gpu#ubuntu_1604_cuda_10
重開機
測試
1 2 nvidia-smi nvcc -V 編譯測試工具，並進行測試
1 2 3 4 5 cd /usr/local/cuda-10.0/samples sudo make cd bin/x86_64/linux/release sudo ./deviceQuery sudo ./bandwidthTest 安裝 tensorflow-gpu
1 sudo pip3 install tensorflow-gpu 測試 tensorflow 能否抓到 GPU
1 python3 1 2 3 4 5 6 7 from tensorflow.</description></item></channel></rss>