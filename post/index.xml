<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on KID's Blog</title><link>https://blog.jyhsu.tw/post/</link><description>Recent content in Posts on KID's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Fri, 24 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jyhsu.tw/post/index.xml" rel="self" type="application/rss+xml"/><item><title>自動切換 tqdm 進度條的顯示模式</title><link>https://blog.jyhsu.tw/p/%E8%87%AA%E5%8B%95%E5%88%87%E6%8F%9B-tqdm-%E9%80%B2%E5%BA%A6%E6%A2%9D%E7%9A%84%E9%A1%AF%E7%A4%BA%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E8%87%AA%E5%8B%95%E5%88%87%E6%8F%9B-tqdm-%E9%80%B2%E5%BA%A6%E6%A2%9D%E7%9A%84%E9%A1%AF%E7%A4%BA%E6%A8%A1%E5%BC%8F/</guid><description>前言 使用 Python 時，若須顯示進度條，常會使用 tqdm 套件來顯示進度條。
介紹 tqdm 是個方便用於顯示進度條的套件，只要簡單的使用 tqdm() 將要迭代的變數包起來，即可直接顯示進度條
1 2 3 from tqdm import tqdm for i in tqdm(range(10000)): ... 然而若使用 Jupyter Notebook 來執行，顯示上會怪怪的，
一般會替換使用專為 Notebook 設計的 tqdm.notebook
1 2 3 from tqdm.notebook import tqdm for i in tqdm(range(10000)): ... 那如果同一份程式碼，要用於指令界面與 Notebook 呢？
正好套件也有提供能自動偵測環境的 tqdm
只要改用 tqdm.auto 就可以了
1 2 3 from tqdm.auto import tqdm for i in tqdm(range(10000)): ... 結語 用 tqdm.</description></item><item><title>使用 dill 保留 Python Session</title><link>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-dill-%E4%BF%9D%E7%95%99-python-session/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-dill-%E4%BF%9D%E7%95%99-python-session/</guid><description>前言 在使用 Python 直譯器或 Jupyter 等工具進行測試時，有時會希望能將變數保留下來，
通常我們會將變數逐一保存為 pickle（*.pkl）檔案，
但若須保存的變數較多，或希望保存整個 Session 的所有變數，如此操作卻會相當麻煩，
因此，能夠保存整個 Session 的 dill 套件或許會成為一個更好的選擇。
介紹 dill 可將常見型態的 Python 變數透過序列化的方式保存於 Pickle 檔案，
並透過反序列化的方式由 Pickle 檔案取回變數到 Session 中。
相較於其他序列化／反序列化套件，dill 還可以直接將 Session 中的所有變數進行上述動作。
安裝 直接使用 pip 直接進行套件安裝即可
1 pip3 install dill 保存 Session 將 Session 中的所有變數保存至檔案
1 2 import dill dill.dump_session(filename=&amp;#39;path/to/session.pkl&amp;#39;) 載入 Session 載入檔案，將變數取回到 Session 中
1 2 import dill dill.load_session(filename=&amp;#39;path/to/session.pkl&amp;#39;) 注意 若不指定 filename 參數，將預設為暫存資料夾中的 /tmp/session.</description></item><item><title>用 GitHub 貢獻圖製作貪食蛇動畫</title><link>https://blog.jyhsu.tw/p/%E7%94%A8-github-%E8%B2%A2%E7%8D%BB%E5%9C%96%E8%A3%BD%E4%BD%9C%E8%B2%AA%E9%A3%9F%E8%9B%87%E5%8B%95%E7%95%AB/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E7%94%A8-github-%E8%B2%A2%E7%8D%BB%E5%9C%96%E8%A3%BD%E4%BD%9C%E8%B2%AA%E9%A3%9F%E8%9B%87%E5%8B%95%E7%95%AB/</guid><description>前言 GitHub 提供了一個有限度自訂個人檔案的功能。
只要在自己的帳號中建立與帳號相同名稱的儲存庫，
其中的 README.md 檔案，將會展示在個人頁面上方。
之前我只放了一些在 GitHub 活動或紀錄相關的統計圖，
如星星、提交、PR、Issue 等等的數量，
以及自己各種語言的使用比例。
正好這幾天發現了 Platane/snk 這個專案，
這專案展示了以自己的 GitHub 貢獻圖製作貪食蛇動畫的有趣功能
原始貢獻圖 原始貢獻圖 貪食蛇動畫 貪食蛇動畫 線上試玩 snk 專案提供了一個線上試玩的頁面，
進入以下網址後，輸入自己的 GitHub 帳號，即可即時生成貪食蛇動畫
https://platane.github.io/snk/ 正式開始 由於最終目標是要在 GitHub 個人頁面展示貪食蛇動畫，
建立與帳號同名儲存庫並建立 README.md 的流程就請自行參考 GitHub 文件了。
這邊主要說明如何利用 GitHub Actions 定時自動更新圖片，並將其展示於上述位置。
步驟非常簡單，snk 專案也提供了完整的範例，以下只針對重點說明。
進入 GitHub 中與帳號同名的儲存庫，點擊 Actions 進入 GitHub Actions 頁面 點擊 New workflows 建立新的工作流程 檔名自訂（供自己辨識用），內容貼上以下設定，並將 github_user_name 參數的值改為自己的 GitHub 帳號 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 name:generate animationon:schedule:- cron:&amp;#34;0 */6 * * *&amp;#34;# every 6 hoursworkflow_dispatch:jobs:generate:runs-on:ubuntu-latesttimeout-minutes:10steps:# generates a snake game from a github user (&amp;lt;github_user_name&amp;gt;) contributions graph, output a svg animation at &amp;lt;svg_out_path&amp;gt;- name:generate github-contribution-grid-snake.</description></item><item><title>決定使用 GitHub Actions 將 Hugo 佈署到 GitHub Pages</title><link>https://blog.jyhsu.tw/p/%E6%B1%BA%E5%AE%9A%E4%BD%BF%E7%94%A8-github-actions-%E5%B0%87-hugo-%E4%BD%88%E7%BD%B2%E5%88%B0-github-pages/</link><pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E6%B1%BA%E5%AE%9A%E4%BD%BF%E7%94%A8-github-actions-%E5%B0%87-hugo-%E4%BD%88%E7%BD%B2%E5%88%B0-github-pages/</guid><description>被放棄的方案 過去，在無名小站關閉之後，
主要是使用 WordPress 將網誌架設於自己租用的 VPS。
但堂堂 WordPress 只用來寫網誌好像有點太浪費？
而且 WordPress 的架設、更新、租用 VPS 等也都會是成本。
選擇 Hugo 與 GitHub Pages 選擇替代方案時，考量的幾個主要條件：
免費 持續更新 無須準備網站伺服器主機 不用花太多時間維護 使用 Markdown 撰寫 其中希望使用 Markdown 撰寫的原因，不外乎是平常的習慣，在 GitHub、GitLab、HackMD 等網站都是使用 Markdown。
比起 WordPress 那些強大的文章編輯工具，Markdown 這類簡單的文字格式反而更適合我們有條理的編輯與呈現內容。
基於上述考量，認為不見得需要將網誌平台「架設」起來，
而將整個網誌本身轉換為靜態網頁，或許也是個方案。
並且若是靜態網站，就可以直接發佈到 GitHub Pages 而無須自行架設。
因此，決定往「靜態網站產生器」的方向尋找，
除了以前就知道但一直沒去接觸的 Jekyll 之外，也得知了 Hexo 與 Hugo 的存在。
為了從這些當中選出一款來使用，除了各自官方網站的介紹之外，也稍微看了些比較的文章：
靜態網站產生器介紹 靜態網站產生器大比拚 最終選擇了 Hugo 作為網誌的靜態網站產生器
實際佈署流程 網路上的資料超級多了，這邊就不贅述太細節的事情
安裝 Git 與 Hugo
須對於指令操作與 Git 版本控制略為熟悉。</description></item><item><title>Hello, Hugo!</title><link>https://blog.jyhsu.tw/p/hello-hugo/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/hello-hugo/</guid><description>在 Hugo 的第一篇文章
｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡
總之先試著
把之前在 WordPress 上的文章都搬過來了
參考資料 Hugo: The world&amp;rsquo;s fastest framework for building websites GitHub Actions for Hugo</description></item><item><title>時間的四捨五入（R、Python Pandas）</title><link>https://blog.jyhsu.tw/p/%E6%99%82%E9%96%93%E7%9A%84%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5-r-python-pandas/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E6%99%82%E9%96%93%E7%9A%84%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5-r-python-pandas/</guid><description>資料處理時，常需要將時間轉換為接近的整點，
如：9:47 轉換為 10:00；14:03 轉換為 14:00
或是以 15 分鐘為區間，
如：9:47 轉換為 9:45、5:23 轉換為 5:30
以下分別介紹 R 與 Python 兩種語言的處理方式
R 使用 lubridate 套件中的 round_date（四捨五入）、floor_date（向下取整）、ceiling_date（向上取整）
三者皆可依照需求指定時間精度，以下範例分別以 5 分鐘、10 分鐘、1 小時取接近值
1 2 3 4 5 6 7 8 9 10 11 12 13 x &amp;lt;- as.POSIXct(&amp;#34;2017-10-11 09:49:03&amp;#34;) lubridate::round_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 lubridate::floor_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:45:00 lubridate::floor_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:40:00 lubridate::floor_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 lubridate::ceiling_date(x, &amp;#34;5 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, &amp;#34;10 minute&amp;#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, &amp;#34;hour&amp;#34;) # 2017-10-11 10:00:00 Python Python 本身較難處理這類情況，因此會使用 Pandas 套件中 pandas.</description></item><item><title>讓 LINE 以外部瀏覽器開啟超連結</title><link>https://blog.jyhsu.tw/p/%E8%AE%93-line-%E4%BB%A5%E5%A4%96%E9%83%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E9%96%8B%E5%95%9F%E8%B6%85%E9%80%A3%E7%B5%90/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E8%AE%93-line-%E4%BB%A5%E5%A4%96%E9%83%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E9%96%8B%E5%95%9F%E8%B6%85%E9%80%A3%E7%B5%90/</guid><description>LINE 預設會以 in-app 的瀏覽器開啟超連結，但這種開啟方式卻容易使網頁的功能受限（排版崩壞、JS 無法正常運作等）
若能以外部瀏覽器開啟超連結，該問題便能被克服。
註：以下方法不僅限於使用訊息傳送的網址，透過 LINE 掃描的 QR 碼中所帶的網址亦有相同效果
其實應對方式很簡單 針對我們需要讓使用者使用外部瀏覽器開啟的超連結 加上 ?openExternalBrowser=1 參數即可
例如原本網址為
https://wp.kid7.club/ 加上參數，變為以下網址
https://wp.kid7.club/?openExternalBrowser=1 如此便能使在 LINE 中點擊網址的使用者直接以外部瀏覽器開啟超連結
參考資料 LINE BOT Development Guidelines （P.52）</description></item><item><title>使用 SNMP 進行系統監控</title><link>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-snmp-%E9%80%B2%E8%A1%8C%E7%B3%BB%E7%B5%B1%E7%9B%A3%E6%8E%A7/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-snmp-%E9%80%B2%E8%A1%8C%E7%B3%BB%E7%B5%B1%E7%9B%A3%E6%8E%A7/</guid><description>監控端 使用 Docker 版，以簡化佈署複雜度
https://github.com/setiseta/docker-librenms
調整 docker-compose.yml
修改 port
修改時區為 Asia/Taipei（兩處） 使用 docker-compose 佈署上述容器 進入修改帳號密碼（預設帳號/密碼：librenms） 根據需求於 HTTP server 設定反向代理 被監控端 安裝 snmpd 與 snmp（前者為服務本身，後者則包含 snmpwalk 等指令集）
1 sudo apt install snmpd snmp 從本機測試連線
1 snmpwalk -v 2c -c public localhost 修改 /etc/snmp/snmpd.conf
修改 agentAddress，使其能從遠端被訪問（存取控制則由防火牆直接管理） # 將 agentAddress udp:127.0.0.1:161 # 修改為 agentAddress udp:161 修改資料收集範圍（參考 IDC 設定方式） # 將 view systemonly included .</description></item><item><title>測試檔案讀寫速度</title><link>https://blog.jyhsu.tw/p/%E6%B8%AC%E8%A9%A6%E6%AA%94%E6%A1%88%E8%AE%80%E5%AF%AB%E9%80%9F%E5%BA%A6/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E6%B8%AC%E8%A9%A6%E6%AA%94%E6%A1%88%E8%AE%80%E5%AF%AB%E9%80%9F%E5%BA%A6/</guid><description>可用於測試本機速度、NFS 速度等
請先以 cd 指令切換至欲測試的路徑
測試檔案寫入速度 1 time dd if=/dev/zero of=testfile bs=16k count=128k 測試檔案讀取速度 1 time dd if=testfile of=/dev/null bs=16k 參考資料 performance – Measure &amp;amp; benchmark the speed &amp;amp; latency of file access on a mounted NFS share – Server Fault</description></item><item><title>Ubuntu 帳號停用與重新啟用</title><link>https://blog.jyhsu.tw/p/ubuntu-%E5%B8%B3%E8%99%9F%E5%81%9C%E7%94%A8%E8%88%87%E9%87%8D%E6%96%B0%E5%95%9F%E7%94%A8/</link><pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/ubuntu-%E5%B8%B3%E8%99%9F%E5%81%9C%E7%94%A8%E8%88%87%E9%87%8D%E6%96%B0%E5%95%9F%E7%94%A8/</guid><description>帳號停用 將帳號設定為昨天過期
1 sudo usermod -e $(date -d &amp;#34;yesterday&amp;#34; +&amp;#34;%Y-%m-%d&amp;#34;) &amp;lt;user&amp;gt; 確認帳號期限
1 sudo chage -l &amp;lt;user&amp;gt; 封存家目錄
1 2 3 4 cd /home sudo tar -I pigz -p -cvf &amp;lt;name of archive&amp;gt;.tar.gz &amp;lt;username&amp;gt; # 或以下 sudo tar czvfp &amp;lt;name of archive&amp;gt;.tar.gz &amp;lt;username&amp;gt; In addition, when doing a tar backup, it’s also good to add the following flags : p &amp;amp; (z/j)</description></item><item><title>Python 測試程式碼片段執行時間</title><link>https://blog.jyhsu.tw/p/python-%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5%E5%9F%B7%E8%A1%8C%E6%99%82%E9%96%93/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/python-%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5%E5%9F%B7%E8%A1%8C%E6%99%82%E9%96%93/</guid><description>測試 Python 的程式碼片段實際執行所需秒數
1 2 3 4 5 6 7 import time start = time.perf_counter() # Do something end = time.perf_counter() elapsed = end - start print(&amp;#34;elapsed:&amp;#34;, elapsed) 參考資料 time — Time access and conversions — Python 3 documentation</description></item><item><title>使用 Telegram 接收 APC UPS 事件通知</title><link>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-telegram-%E6%8E%A5%E6%94%B6-apc-ups-%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-telegram-%E6%8E%A5%E6%94%B6-apc-ups-%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5/</guid><description>前置處理 已連接 APC UPS，並於機器中安裝 apcupsd 向 @BotFather 申請 Telegram Bot，並取得 token 安裝能夠透過 CLI 呼叫 Telegram Bot API 的工具
（以下以 TelegramBotCli 為例） 設定流程 確認已完成 apcupsd 的設定，並能透過已下指令順利存取 UPS 狀態
apcaccess status 在 Terminal 開著的情況下，測試 UPS 能否順利偵測事件並發送通知
（拔插頭看有沒有看到訊息之類的）
進入 /etc/apcupsd，可以看到一些檔案
apccontrol 是整個核心部分，有興趣可以看看，但官方警告不要修改這個
於是我們要修改的是根據不同事件各自獨立的處理流程檔案
開啟事件處理流程檔案，如 offbattery、onbattery、commfailure、commok 等我們希望收到通知的事件，預設應該會是類似以下內容
主要是在事件發生時，先整理需要的訊息，並以管線轉送給設定好的通知程序，進行通知發送的動作
其中第 16 行管線後的部分，即為我們希望修改的訊息轉送動作
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!</description></item><item><title>PhpStorm 使用 PHP Code Sniffier</title><link>https://blog.jyhsu.tw/p/phpstorm-%E4%BD%BF%E7%94%A8-php-code-sniffier/</link><pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/phpstorm-%E4%BD%BF%E7%94%A8-php-code-sniffier/</guid><description>安裝 安裝 PHP_CodeSniffer （推薦使用 Composer 進行安裝）
https://github.com/squizlabs/PHP_CodeSniffer
1 composer global require &amp;#34;squizlabs/php_codesniffer=*&amp;#34; 確認指令可用
1 2 phpcs --version phpcbf --version 使用 phpcs 檢查錯誤
phpcs &amp;lt;檔案/資料夾&amp;gt; 自動修正錯誤
1 phpcbf &amp;lt;檔案/資料夾&amp;gt; 自訂驗證標準 使用 phpcs 時，可自訂驗證使用標準（如：PSR-2，或自己撰寫的定義檔等） 若未指定，將預設嘗試抓取 phpcs.xml 作為標準
1 2 phpcs --standard=PSR2 phpcs --standard=/path/to/custom_ruleset.xml 於 PhpStorm 使用 phpcs 設定 Code Sniffier
Settings → Languages &amp;amp; Frameworks → PHP → Quality Tools → Code Sniffier Configuration 設定為 Local，點擊右側「…」</description></item><item><title>Anaconda 安裝筆記</title><link>https://blog.jyhsu.tw/p/anaconda-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/anaconda-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</guid><description>流程 下載 Anaconda
https://www.anaconda.com/distribution/
1 wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh 安裝 Anaconda
安裝路徑：/opt/anaconda
不使用 Conda init 初始化
1 sudo bash ./Anaconda3-2019.07-Linux-x86_64.sh 建立 Anaconda 使用者
1 sudo useradd anaconda 設定資料夾權限
1 2 3 sudo chown -R anaconda:anaconda /opt/anaconda sudo chmod -R go-w /opt/anaconda sudo chmod -R go+rX /opt/anaconda 設定 PATH
（給使用者：）在 /etc/environment 的 PATH 新增 /opt/anaconda/bin</description></item><item><title>Ubuntu 16.04/CUDA 10.0 安裝筆記</title><link>https://blog.jyhsu.tw/p/ubuntu-16.04-cuda-10.0-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</link><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/ubuntu-16.04-cuda-10.0-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/</guid><description>流程 安裝 NVIDIA 顯卡驅動與相關套件
https://www.tensorflow.org/install/gpu#ubuntu_1604_cuda_10
重開機
測試
1 2 nvidia-smi nvcc -V 編譯測試工具，並進行測試
1 2 3 4 5 cd /usr/local/cuda-10.0/samples sudo make cd bin/x86_64/linux/release sudo ./deviceQuery sudo ./bandwidthTest 安裝 tensorflow-gpu
1 sudo pip3 install tensorflow-gpu 測試 tensorflow 能否抓到 GPU
1 python3 1 2 3 4 5 6 7 from tensorflow.</description></item><item><title>在 Windows 的 XAMPP 安裝 Imagick 擴充套件</title><link>https://blog.jyhsu.tw/p/%E5%9C%A8-windows-%E7%9A%84-xampp-%E5%AE%89%E8%A3%9D-imagick-%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6/</link><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/%E5%9C%A8-windows-%E7%9A%84-xampp-%E5%AE%89%E8%A3%9D-imagick-%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6/</guid><description> 檢視 XAMPP 的 phpinfo()，確認以下項目 Architecture：x86 / x64 Thread Safety：enabled / disabled Compiler：如 MSVC15 (Visual C++ 2017) 到 PECL Deps 查看對應以上 Architecture 與 Compiler 對應的 ImageMagick 版本 如 ImageMagick-7.0.7-11-vc15-x64.zip 則為 7.0.7 根據以下文章進行安裝，唯各步驟須注意使用上述版本 How to install and enable the Imagick extension in XAMPP for Windows 若第一步驟找不到對應版本的 ImageMagick，可到這裡下載</description></item><item><title>XAMPP 安裝 PHP_CodeSniffer</title><link>https://blog.jyhsu.tw/p/xampp-%E5%AE%89%E8%A3%9D-php_codesniffer/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/xampp-%E5%AE%89%E8%A3%9D-php_codesniffer/</guid><description>2019-10-06 更新：
此篇為舊筆記
現已不建議使用 pear 安裝，建議直接使用 Composer 安裝全域套件
1 composer global require &amp;#34;squizlabs/php_codesniffer=*&amp;#34; 使用 XAMPP 時，
若需安裝 PHP_CodeSniffer，
一般會使用 PEAR 的安裝方案
1 pear install PHP_CodeSniffer 但很可能出現以下錯誤
Cannot use result of built-in function in write context in D:\xampp\php\pear\Archive\Tar.php on line 639 解決方案：
進入檔案，將該行由 1 $v_att_list = &amp;amp; func_get_args(); 改為
1 $v_att_list = func_get_args(); 重新安裝 Archive_Tar 1 pear install Archive_Tar 重新安裝 PHP_CodeSniffer pear install PHP_CodeSniffer</description></item><item><title>Spigot 使用 Flyway 踩雷分享</title><link>https://blog.jyhsu.tw/p/spigot-%E4%BD%BF%E7%94%A8-flyway-%E8%B8%A9%E9%9B%B7%E5%88%86%E4%BA%AB/</link><pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate><guid>https://blog.jyhsu.tw/p/spigot-%E4%BD%BF%E7%94%A8-flyway-%E8%B8%A9%E9%9B%B7%E5%88%86%E4%BA%AB/</guid><description>Flyway 是一款資料庫版本控管的解決方案，
方便接上不同類型的資料庫，也能夠輕易實作遷移機制（Migration）
自己撰寫的 Spigot 插件正好需要連結資料庫
原本苦惱於遷移機制的實作，直到發現 Flyway 具備遷移機制，同時又具有 Java API 可以使用
就決定是這款了！
這篇主要是要記錄自己踩雷的解決方法，就不推坑傳教了
有興趣自己去 Google
在這次撰寫的 Spigot 插件中，打算暫且先以 SQLite 作為資料庫
於是先安裝了 Flyway 與 SQLite-JDBC
compile 'org.flywaydb:flyway-core:5.2.4' compile 'org.xerial:sqlite-jdbc:3.23.1' 設定 Flyway
1 2 3 4 5 String configFolder = this.plugin.getDataFolder().getAbsolutePath(); String dbUrl = &amp;#34;jdbc:sqlite:&amp;#34; + configFolder + &amp;#34;/database.db&amp;#34;; Flyway flyway = Flyway.configure().dataSource(dbUrl, null, null).load(); flyway.migrate(); 然後他就爆炸了ლ(ﾟдﾟლ)
遇到的第一個問題：
FlywayException: Unable to instantiate class org.flywaydb.core.internal.logging.slf4j.Slf4jLogCreator 解決方案：自行指令 LogCreator</description></item></channel></rss>