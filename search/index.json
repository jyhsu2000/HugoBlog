[{"content":"前言 在使用 Python 直譯器或 Jupyter 等工具進行測試時，有時會希望能將變數保留下來，\n通常我們會將變數逐一保存為 pickle（*.pkl）檔案，\n但若須保存的變數較多，或希望保存整個 Session 的所有變數，如此操作卻會相當麻煩，\n因此，能夠保存整個 Session 的 dill 套件或許會成為一個更好的選擇。\n介紹 dill 可將常見型態的 Python 變數透過序列化的方式保存於 Pickle 檔案，\n並透過反序列化的方式由 Pickle 檔案取回變數到 Session 中。\n相較於其他序列化／反序列化套件，dill 還可以直接將 Session 中的所有變數進行上述動作。\n安裝 直接使用 pip 直接進行套件安裝即可\n1  pip3 install dill   保存 Session 1 2  import dill dill.dump_session(filename=\u0026#39;path/to/session.pkl\u0026#39;)   載入 Session 1 2  import dill dill.load_session(filename=\u0026#39;path/to/session.pkl\u0026#39;)   注意 若不指定 filename 參數，將預設為暫存資料夾中的 /tmp/session.pkl，\n如欲長久保留，或欲區分多個 Session 的變數，建議自行指定檔案路徑\n實際測試 嘗試建立變數，並透過 dill 保存 Session，\n重開一個 Session 後，透過 dill 載入被保存的 Session  \n參考資料  pickle — Python object serialization — Python 3 documentation dill · PyPI  ","date":"2021-09-30T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-dill-%E4%BF%9D%E7%95%99-python-session/","title":"使用 dill 保留 Python Session"},{"content":"前言 GitHub 提供了一個有限度自訂個人檔案的功能。\n只要在自己的帳號中建立與帳號相同名稱的儲存庫，\n其中的 README.md 檔案，將會展示在個人頁面上方。\n之前我只放了一些在 GitHub 活動或紀錄相關的統計圖，\n如星星、提交、PR、Issue 等等的數量，\n以及自己各種語言的使用比例。\n正好這幾天發現了 Platane/snk 這個專案，\n這專案展示了以自己的 GitHub 貢獻圖製作貪食蛇動畫的有趣功能\n原始貢獻圖  原始貢獻圖   貪食蛇動畫  貪食蛇動畫   線上試玩 snk 專案提供了一個線上試玩的頁面，\n進入以下網址後，輸入自己的 GitHub 帳號，即可即時生成貪食蛇動畫\n https://platane.github.io/snk/  正式開始 由於最終目標是要在 GitHub 個人頁面展示貪食蛇動畫，\n建立與帳號同名儲存庫並建立 README.md 的流程就請自行參考 GitHub 文件了。\n這邊主要說明如何利用 GitHub Actions 定時自動更新圖片，並將其展示於上述位置。\n步驟非常簡單，snk 專案也提供了完整的範例，以下只針對重點說明。\n 進入 GitHub 中與帳號同名的儲存庫，點擊 Actions 進入 GitHub Actions 頁面 點擊 New workflows 建立新的工作流程 檔名自訂（供自己辨識用），內容貼上以下設定，並將 github_user_name 參數的值改為自己的 GitHub 帳號 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  name:generate animationon:schedule:- cron:\u0026#34;0 */6 * * *\u0026#34;# every 6 hoursworkflow_dispatch:jobs:generate:runs-on:ubuntu-latesttimeout-minutes:10steps:# generates a snake game from a github user (\u0026lt;github_user_name\u0026gt;) contributions graph, output a svg animation at \u0026lt;svg_out_path\u0026gt;- name:generate github-contribution-grid-snake.svguses:Platane/snk@masterwith:github_user_name:jyhsu2000svg_out_path:dist/github-contribution-grid-snake.svg# push the content of \u0026lt;build_dir\u0026gt; to a branch# the content will be available at https://raw.githubusercontent.com/\u0026lt;github_user\u0026gt;/\u0026lt;repository\u0026gt;/\u0026lt;target_branch\u0026gt;/\u0026lt;file\u0026gt; , or as github page- name:push github-contribution-grid-snake.svg to the output branchuses:crazy-max/ghaction-github-pages@v2.5.0with:target_branch:outputbuild_dir:distenv:GITHUB_TOKEN:${{ secrets.GITHUB_TOKEN }}  以下針對重點部份簡單說明：\n name：工作流程名稱（供自己辨識用）。 on：工作流程觸發時機。\n其中 schedule 為排程執行，我這邊設定為每 6 小時執行一次，撰寫方式可參考 crontab.guru；\n（唯須注意 GitHub Actions 重複執行的最小間隔為 5 分鐘）\n而 workflow_dispatch 則是使該工作流程可以由網頁界面手動觸發。\n（畢竟我不想要為了看結果要等好幾個小時🤣） jobs：執行的步驟。\n第一步驟是利用自己的貢獻圖生成貪食蛇動畫，其中 github_user_name 參數記得改為自己的 GitHub 帳號。\n第二個步驟則是將前一步驟所生成的 svg 圖檔推送至該專案的 output 分支   進入 GitHub Actions 頁面，點擊前面建立的工作流程，並按下 Run workflow 使其開始執行 待執行完成後，即可由專案看到多了一個 output 分支，進入該分支，找到該檔案\n並於該檔案檢視頁面按下右上角的 raw 取得實際圖檔網址；或自行使用以下格式 https://raw.githubusercontent.com/帳號/儲存庫/output/github-contribution-grid-snake.svg  將上述網址以圖片形式加入主要分支的 README.md 中，如： 1  ![](https://raw.githubusercontent.com/jyhsu2000/jyhsu2000/output/github-contribution-grid-snake.svg)     成果截圖  成果截圖   參考資料  Managing your profile README Platane/snk - Generates a snake game from a github user contributions graph  ","date":"2021-07-10T00:00:00Z","image":"https://blog.jyhsu.tw/p/%E7%94%A8-github-%E8%B2%A2%E7%8D%BB%E5%9C%96%E8%A3%BD%E4%BD%9C%E8%B2%AA%E9%A3%9F%E8%9B%87%E5%8B%95%E7%95%AB/github-contribution-grid-snake.svg","permalink":"https://blog.jyhsu.tw/p/%E7%94%A8-github-%E8%B2%A2%E7%8D%BB%E5%9C%96%E8%A3%BD%E4%BD%9C%E8%B2%AA%E9%A3%9F%E8%9B%87%E5%8B%95%E7%95%AB/","title":"用 GitHub 貢獻圖製作貪食蛇動畫"},{"content":"被放棄的方案 過去，在無名小站關閉之後，\n主要是使用 WordPress 將網誌架設於自己租用的 VPS。\n但堂堂 WordPress 只用來寫網誌好像有點太浪費？\n而且 WordPress 的架設、更新、租用 VPS 等也都會是成本。\n選擇 Hugo 與 GitHub Pages 選擇替代方案時，考量的幾個主要條件：\n 免費 持續更新 無須準備網站伺服器主機 不用花太多時間維護 使用 Markdown 撰寫  其中希望使用 Markdown 撰寫的原因，不外乎是平常的習慣，在 GitHub、GitLab、HackMD 等網站都是使用 Markdown。\n比起 WordPress 那些強大的文章編輯工具，Markdown 這類簡單的文字格式反而更適合我們有條理的編輯與呈現內容。\n基於上述考量，認為不見得需要將網誌平台「架設」起來，\n而將整個網誌本身轉換為靜態網頁，或許也是個方案。\n並且若是靜態網站，就可以直接發佈到 GitHub Pages 而無須自行架設。\n因此，決定往「靜態網站產生器」的方向尋找，\n除了以前就知道但一直沒去接觸的 Jekyll 之外，也得知了 Hexo 與 Hugo 的存在。\n為了從這些當中選出一款來使用，除了各自官方網站的介紹之外，也稍微看了些比較的文章：\n 靜態網站產生器介紹 靜態網站產生器大比拚  最終選擇了 Hugo 作為網誌的靜態網站產生器\n實際佈署流程 網路上的資料超級多了，這邊就不贅述太細節的事情\n  安裝 Git 與 Hugo\n須對於指令操作與 Git 版本控制略為熟悉。\n由於平常使用 Windows 作業系統，Hugo 的部份是依照安裝說明直接從 Hugo 的 GitHub 儲存庫的釋出頁面下載\n為了面對未知的未來，選擇安裝了標示了 extended 字樣的擴充版本\n  建立 Hugo 專案，初始化 Git 儲存庫，並新增主題\nHugo 沒有預設主題，可以直接到 Hugo Themes 尋找\n1 2 3 4  hugo new site HugoBlog cd HugoBlog git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack     將主題中 exampleSite 資料夾的內容，複製到專案資料夾，並嘗試將 Hugo 執行起來\n1  hugo server -D     在 config.yaml 或 config.toml 完成設定，並嘗試新增頁面或文章\n  為專案建立 .gitignore 檔案，避免 Git 追蹤不必要的檔案\n可以直接使用 gitignore.io 網站生成需要忽略的清單\n  建立 GitHub 儲存庫，將專案推送至主線\n  設定 GitHub Actions\nWorkflow 使用 GitHub Actions for Hugo 進行專案建置，\n再利用 GitHub Actions for GitHub Pages 將建置後的檔案發佈至 GitHub Pages。\n要注意的是，若須自訂域名，須在其中 actions-gh-pages 章節的 with 指令 cname 參數\n具體可參考本網誌的 Workflow\n  設定 GitHub Pages\nSource 指定為 gh-pages 分支\n若須自訂域名，設定的域名須與前一步驟相符\n  未來若新增或修改文章，推送至主線後，將自動觸發 GitHub Actions 將網站內容發佈\n  結語 將網誌轉為使用 GitHub Actions 自動將 Hugo 佈署到 GitHub Pages 之後，\n可有效省去維護主機與網站的時間成本與金錢成本。\n編輯文章方面，我習慣在電腦中使用 VSCode 編輯，並使用 Hugo 預覽，確認沒問題後，再推送至 GitHub 儲存庫。\n但如果真要方便，也可以直接使用 GitHub 網頁版，或使用 HackMD/HedgeDoc 等平台連動 GitHub 儲存庫的方式進行編輯，\n如此一來，甚至只須使用瀏覽器即可完成文章編修。\n參考資料  使用 Github Actions 來自動化部署 Hugo 到 Github Pages Hugo Documentation  ","date":"2021-06-23T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E6%B1%BA%E5%AE%9A%E4%BD%BF%E7%94%A8-github-actions-%E5%B0%87-hugo-%E4%BD%88%E7%BD%B2%E5%88%B0-github-pages/","title":"決定使用 GitHub Actions 將 Hugo 佈署到 GitHub Pages"},{"content":"在 Hugo 的第一篇文章\n｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡\n總之先試著\n把之前在 WordPress 上的文章都搬過來了\n參考資料  Hugo: The world\u0026rsquo;s fastest framework for building websites GitHub Actions for Hugo  ","date":"2021-06-19T00:00:00Z","image":"https://blog.jyhsu.tw/p/hello-hugo/Logo_of_Hugo_the_static_website_generator.svg","permalink":"https://blog.jyhsu.tw/p/hello-hugo/","title":"Hello, Hugo!"},{"content":"資料處理時，常需要將時間轉換為接近的整點，\n如：9:47 轉換為 10:00；14:03 轉換為 14:00\n或是以 15 分鐘為區間，\n如：9:47 轉換為 9:45、5:23 轉換為 5:30\n以下分別介紹 R 與 Python 兩種語言的處理方式\nR 使用 lubridate 套件中的 round_date（四捨五入）、floor_date（向下取整）、ceiling_date（向上取整）\n三者皆可依照需求指定時間精度，以下範例分別以 5 分鐘、10 分鐘、1 小時取接近值\n1 2 3 4 5 6 7 8 9 10 11 12 13  x \u0026lt;- as.POSIXct(\u0026#34;2017-10-11 09:49:03\u0026#34;) lubridate::round_date(x, \u0026#34;5 minute\u0026#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, \u0026#34;10 minute\u0026#34;) # 2017-10-11 09:50:00 lubridate::round_date(x, \u0026#34;hour\u0026#34;) # 2017-10-11 10:00:00 lubridate::floor_date(x, \u0026#34;5 minute\u0026#34;) # 2017-10-11 09:45:00 lubridate::floor_date(x, \u0026#34;10 minute\u0026#34;) # 2017-10-11 09:40:00 lubridate::floor_date(x, \u0026#34;hour\u0026#34;) # 2017-10-11 10:00:00 lubridate::ceiling_date(x, \u0026#34;5 minute\u0026#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, \u0026#34;10 minute\u0026#34;) # 2017-10-11 09:50:00 lubridate::ceiling_date(x, \u0026#34;hour\u0026#34;) # 2017-10-11 10:00:00   Python Python 本身較難處理這類情況，因此會使用 Pandas 套件中 pandas.Series.dt accessor，使用其 round（四捨五入）、floor（向下取整）、ceil（向上取整） 亦可依照需求指定時間精度，以下範例分別以 5 分鐘、10 分鐘、1 小時取接近值\n1 2 3 4 5 6 7 8 9 10 11 12 13  x = pd.Series([datetime(2017,10,11,9,49,3)]) x.dt.round(\u0026#39;5 min\u0026#39;) # 2017-10-11 09:50:00 x.dt.round(\u0026#39;10 min\u0026#39;) # 2017-10-11 09:50:00 x.dt.round(\u0026#39;1 h\u0026#39;) # 2017-10-11 10:00:00 x.dt.floor(\u0026#39;5 min\u0026#39;) # 2017-10-11 09:45:00 x.dt.floor(\u0026#39;10 min\u0026#39;) # 2017-10-11 09:40:00 x.dt.floor(\u0026#39;1 h\u0026#39;) # 2017-10-11 09:00:00 x.dt.ceil(\u0026#39;5 min\u0026#39;) # 2017-10-11 09:50:00 x.dt.ceil(\u0026#39;10 min\u0026#39;) # 2017-10-11 09:50:00 x.dt.ceil(\u0026#39;1 h\u0026#39;) # 2017-10-11 10:00:00   ","date":"2021-03-04T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E6%99%82%E9%96%93%E7%9A%84%E5%9B%9B%E6%8D%A8%E4%BA%94%E5%85%A5-r-python-pandas/","title":"時間的四捨五入（R、Python Pandas）"},{"content":"LINE 預設會以 in-app 的瀏覽器開啟超連結，但這種開啟方式卻容易使網頁的功能受限（排版崩壞、JS 無法正常運作等）\n若能以外部瀏覽器開啟超連結，該問題便能被克服。\n註：以下方法不僅限於使用訊息傳送的網址，透過 LINE 掃描的 QR 碼中所帶的網址亦有相同效果\n其實應對方式很簡單 針對我們需要讓使用者使用外部瀏覽器開啟的超連結 加上 ?openExternalBrowser=1 參數即可\n例如原本網址為\nhttps://wp.kid7.club/ 加上參數，變為以下網址\nhttps://wp.kid7.club/?openExternalBrowser=1 如此便能使在 LINE 中點擊網址的使用者直接以外部瀏覽器開啟超連結\n參考資料  LINE BOT Development Guidelines （P.52）  ","date":"2020-11-11T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E8%AE%93-line-%E4%BB%A5%E5%A4%96%E9%83%A8%E7%80%8F%E8%A6%BD%E5%99%A8%E9%96%8B%E5%95%9F%E8%B6%85%E9%80%A3%E7%B5%90/","title":"讓 LINE 以外部瀏覽器開啟超連結"},{"content":"監控端 使用 Docker 版，以簡化佈署複雜度\nhttps://github.com/setiseta/docker-librenms\n 調整 docker-compose.yml\n修改 port\n修改時區為 Asia/Taipei（兩處） 使用 docker-compose 佈署上述容器 進入修改帳號密碼（預設帳號/密碼：librenms） 根據需求於 HTTP server 設定反向代理  被監控端 安裝 snmpd 與 snmp（前者為服務本身，後者則包含 snmpwalk 等指令集）\n1  sudo apt install snmpd snmp   從本機測試連線\n1  snmpwalk -v 2c -c public localhost   修改 /etc/snmp/snmpd.conf\n 修改 agentAddress，使其能從遠端被訪問（存取控制則由防火牆直接管理） # 將 agentAddress udp:127.0.0.1:161 # 修改為 agentAddress udp:161  修改資料收集範圍（參考 IDC 設定方式） # 將 view systemonly included .1.3.6.1.2.1.1 view systemonly included .1.3.6.1.2.1.25.1 # 修改為 view systemonly included .1.3.6.1.  修改地理位置資訊 sysLocation IEE 201   重新啟動 snmpd\n1  sudo systemctl restart snmpd.service   調整防火牆設定，允許監控端連入\n（若需由本機 docker 連入，則允許 172.16.0.0/12 連入 udp:161）\n1  sudo ufw allow from 172.16.0.0/12 to any port 161   安裝插件 https://docs.librenms.org/Extensions/Applications/\n根據上述連結中的說明安裝 SNMP 插件，並於 LibreNMS 設定中開啟對應項目\n部分插件（如 fail2ban）需要 sudo 權限，則須在 visudo 設定特權，並於 /etc/snmp/snmpd.conf 設定使用 sudo 執行\nDebian-snmp ALL=(root) NOPASSWD: /etc/snmp/fail2ban extend fail2ban /usr/bin/sudo /etc/snmp/fail2ban 常見問題 若 docker-compose 在 up 之後，持續無法連上資料庫，檢查 data/config/config.php 是否確實有資料庫連線設定，若無則補上\n1 2 3 4 5 6 7 8 9  \u0026lt;?php ## Have a look in misc/config_definitions.json for examples of settings you can set here. DO NOT EDIT misc/config_definitions.json!  ### Database config $config[\u0026#39;db_host\u0026#39;] = \u0026#34;mysql\u0026#34;; $config[\u0026#39;db_user\u0026#39;] = \u0026#34;root\u0026#34;; $config[\u0026#39;db_pass\u0026#39;] = \u0026#34;pwd4librenms\u0026#34;; $config[\u0026#39;db_name\u0026#39;] = \u0026#34;librenms\u0026#34;;   若超連結路徑出現各種底線，將 data/config/config.php 中以下段落解除註解\n1  $config[\u0026#39;base_url\u0026#39;] = \u0026#34;/\u0026#34;;   若無法採集 fail2ban 的資訊，直接執行出現以下訊息\nCan't locate JSON.pm in @INC (you may need to install the JSON module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.26.1 /usr/local/share/perl/5.26.1 /usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base) at ./fail2ban line 80. BEGIN failed--compilation aborted at ./fail2ban line 80. 需安裝 libjson-perl 套件\n1  sudo apt install libjson-perl   ","date":"2020-06-29T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-snmp-%E9%80%B2%E8%A1%8C%E7%B3%BB%E7%B5%B1%E7%9B%A3%E6%8E%A7/","title":"使用 SNMP 進行系統監控"},{"content":"可用於測試本機速度、NFS 速度等\n請先以 cd 指令切換至欲測試的路徑\n測試檔案寫入速度 1  time dd if=/dev/zero of=testfile bs=16k count=128k   測試檔案讀取速度 1  time dd if=testfile of=/dev/null bs=16k   參考資料  performance – Measure \u0026amp; benchmark the speed \u0026amp; latency of file access on a mounted NFS share – Server Fault  ","date":"2020-03-13T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E6%B8%AC%E8%A9%A6%E6%AA%94%E6%A1%88%E8%AE%80%E5%AF%AB%E9%80%9F%E5%BA%A6/","title":"測試檔案讀寫速度"},{"content":"帳號停用 將帳號設定為昨天過期\n1  sudo usermod -e $(date -d \u0026#34;yesterday\u0026#34; +\u0026#34;%Y-%m-%d\u0026#34;) \u0026lt;user\u0026gt;   確認帳號期限\n1  sudo chage -l \u0026lt;user\u0026gt;   封存家目錄\n1 2 3 4  cd /home sudo tar -I pigz -p -cvf \u0026lt;name of archive\u0026gt;.tar.gz \u0026lt;username\u0026gt; # 或以下 sudo tar czvfp \u0026lt;name of archive\u0026gt;.tar.gz \u0026lt;username\u0026gt;    In addition, when doing a tar backup, it’s also good to add the following flags : p \u0026amp; (z/j)\n-p will preserve the original file permissions\n-z will compress using gzip (medium cpu usage, but less space)\n-j will compress using bzip2 (lots of cpu, even less space)\n-v verbose output (optional)\n 將封存檔移往 NFS 封存區\n1 2 3  sudo rsync -avhP --remove-source-files \u0026lt;name of archive\u0026gt;.tar.gz /nfs/Backup/home_archive # 或以下 sudo mv \u0026lt;name of archive\u0026gt;.tar.gz /nfs/Backup/home_archive   移除家目錄\n1  sudo rm -rd /home/\u0026lt;user\u0026gt;   帳號重新啟用 重建家目錄\n1 2  cd /home sudo tar xzvf \u0026lt;name of archive\u0026gt;.tar.gz   重新啟用帳號\n1  sudo usermod -e \u0026#34;\u0026#34; \u0026lt;user\u0026gt;   確認帳號期限\n1  sudo chage -l \u0026lt;user\u0026gt;   參考資料  How to enable or disable a user? – Ask Ubuntu How can I create automatically expiring user accounts? – Unix \u0026amp; Linux Stack Exchange How to Backup and Restore your Home directory | MyLinuxRamblings  ","date":"2020-02-17T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/ubuntu-%E5%B8%B3%E8%99%9F%E5%81%9C%E7%94%A8%E8%88%87%E9%87%8D%E6%96%B0%E5%95%9F%E7%94%A8/","title":"Ubuntu 帳號停用與重新啟用"},{"content":"測試 Python 的程式碼片段實際執行所需秒數\n1 2 3 4 5 6 7  import time start = time.perf_counter() # Do something end = time.perf_counter() elapsed = end - start print(\u0026#34;elapsed:\u0026#34;, elapsed)   參考資料  time — Time access and conversions — Python 3 documentation  ","date":"2019-12-23T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/python-%E6%B8%AC%E8%A9%A6%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5%E5%9F%B7%E8%A1%8C%E6%99%82%E9%96%93/","title":"Python 測試程式碼片段執行時間"},{"content":"前置處理  已連接 APC UPS，並於機器中安裝 apcupsd 向 @BotFather 申請 Telegram Bot，並取得 token 安裝能夠透過 CLI 呼叫 Telegram Bot API 的工具\n（以下以 TelegramBotCli 為例）  設定流程   確認已完成 apcupsd 的設定，並能透過已下指令順利存取 UPS 狀態\napcaccess status   在 Terminal 開著的情況下，測試 UPS 能否順利偵測事件並發送通知\n（拔插頭看有沒有看到訊息之類的）\n  進入 /etc/apcupsd，可以看到一些檔案\napccontrol 是整個核心部分，有興趣可以看看，但官方警告不要修改這個\n於是我們要修改的是根據不同事件各自獨立的處理流程檔案\n  開啟事件處理流程檔案，如 offbattery、onbattery、commfailure、commok 等我們希望收到通知的事件，預設應該會是類似以下內容\n主要是在事件發生時，先整理需要的訊息，並以管線轉送給設定好的通知程序，進行通知發送的動作\n其中第 16 行管線後的部分，即為我們希望修改的訊息轉送動作\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/sh # # This shell script if placed in /etc/apcupsd # will be called by /etc/apcupsd/apccontrol when the # UPS goes back on to the mains after a power failure. # We send an email message to root to notify him. # HOSTNAME=`hostname` MSG=\u0026#34;$HOSTNAMEUPS $1Power has returned\u0026#34; # ( echo \u0026#34;$MSG\u0026#34; echo \u0026#34; \u0026#34; /sbin/apcaccess status ) | $APCUPSD_MAIL -s \u0026#34;$MSG\u0026#34; $SYSADMIN exit 0     我們希望將通知由預設的郵件通知改為 Telegram Bot 通知，因此需要修改管線後的部分\n16  ) | $APCUPSD_MAIL -s \u0026#34;$MSG\u0026#34; $SYSADMIN   將其改為發送通知的指令，如：\n16  ) | xargs -0 python3 /home/jyhsu/TelegramBotCli/sendMessage.py     重新啟動 apcupsd 服務\n1  sudo systemctl restart apcupsd.service     再次測試 APC UPS 能否偵測並發送事件\n（再拔一次插頭）\n  參考資料  APCUPSD User Manual 從零開始的 Telegram Bot | Sean’s Note  ","date":"2019-12-12T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E4%BD%BF%E7%94%A8-telegram-%E6%8E%A5%E6%94%B6-apc-ups-%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5/","title":"使用 Telegram 接收 APC UPS 事件通知"},{"content":"安裝   安裝 PHP_CodeSniffer （推薦使用 Composer 進行安裝）\nhttps://github.com/squizlabs/PHP_CodeSniffer\n1  composer global require \u0026#34;squizlabs/php_codesniffer=*\u0026#34;     確認指令可用\n1 2  phpcs --version phpcbf --version     使用 phpcs 檢查錯誤\nphpcs \u0026lt;檔案/資料夾\u0026gt; 自動修正錯誤\n1  phpcbf \u0026lt;檔案/資料夾\u0026gt;   自訂驗證標準 使用 phpcs 時，可自訂驗證使用標準（如：PSR-2，或自己撰寫的定義檔等） 若未指定，將預設嘗試抓取 phpcs.xml 作為標準\n1 2  phpcs --standard=PSR2 phpcs --standard=/path/to/custom_ruleset.xml   於 PhpStorm 使用 phpcs 設定 Code Sniffier\nSettings → Languages \u0026amp; Frameworks → PHP → Quality Tools → Code Sniffier Configuration 設定為 Local，點擊右側「…」\n \nPHP Code Sniffier path 設定為「phpcs.bat」（無須指定路徑），點擊 Validate 進行驗證，確認抓到全域 phpcs 指令\nPath to phpcbf 填入任意字串，只要不是空白的，PhpStorm 就會自動去抓全域的 phpcbf\n（這種設定方式會使得無法使用 Validate 進行驗證，但不影響使用）\n \nSettings → Editor → Inspections → PHP → Quality Tools → PHP Code Sniffier validation\n勾選後即可啟用，亦可指定驗證標準\n \n將 Coding standard 指定為 Custom\n並點擊「…」將 Path to ruleset 指向專案資料夾的 phpcs.xml\n（PhpStorm 不會自動去使用該檔案作為標準，須自行指定）  \n完成後，PhpStorm 便會依自己提供的 phpcs.xml 對專案中的程式碼進行驗證\n參考資料  https://github.com/squizlabs/PHP_CodeSniffer PHP Code Sniffer – Help | PhpStorm 調整程式碼風格（Coding Style）  ","date":"2019-10-20T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/phpstorm-%E4%BD%BF%E7%94%A8-php-code-sniffier/","title":"PhpStorm 使用 PHP Code Sniffier"},{"content":"流程   下載 Anaconda\nhttps://www.anaconda.com/distribution/\n1  wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh     安裝 Anaconda\n安裝路徑：/opt/anaconda\n不使用 Conda init 初始化\n1  sudo bash ./Anaconda3-2019.07-Linux-x86_64.sh     建立 Anaconda 使用者\n1  sudo useradd anaconda     設定資料夾權限\n1 2 3  sudo chown -R anaconda:anaconda /opt/anaconda sudo chmod -R go-w /opt/anaconda sudo chmod -R go+rX /opt/anaconda     設定 PATH\n（給使用者：）在 /etc/environment 的 PATH 新增 /opt/anaconda/bin\n（給 root：）在 /etc/profile 新增 export PATH=/opt/anaconda/bin:$PATH\n  更新 conda 本身\n（設定 PATH 給 sudo 比較麻煩，可使用下方方式呼叫，或 sudo -i 進 root 之後使用 conda）\n1  sudo $(which conda) update -n base -c defaults conda     初始化 conda\n1 2 3 4  # 初始化給 Bash conda init # 初始化給 Zsh conda init zsh     關閉登入自動 activate\n1  conda config --set auto_activate_base false     參考資料  Installing Anaconda for multiple users – Peter Roche – Medium [Day01]Anaconda環境安裝！ – iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 bash – How do I prevent Conda from activating the base environment by default? – Stack Overflow  ","date":"2019-10-06T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/anaconda-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/","title":"Anaconda 安裝筆記"},{"content":"流程   安裝 NVIDIA 顯卡驅動與相關套件\nhttps://www.tensorflow.org/install/gpu#ubuntu_1604_cuda_10\n  重開機\n  測試\n1 2  nvidia-smi nvcc -V     編譯測試工具，並進行測試\n1 2 3 4 5  cd /usr/local/cuda-10.0/samples sudo make cd bin/x86_64/linux/release sudo ./deviceQuery sudo ./bandwidthTest     安裝 tensorflow-gpu\n1  sudo pip3 install tensorflow-gpu     測試 tensorflow 能否抓到 GPU\n1  python3   1 2 3 4 5 6 7  from tensorflow.python.client import device_lib def get_available_gpus(): local_device_protos = device_lib.list_local_devices() return [x.name for x in local_device_protos if x.device_type == \u0026#39;GPU\u0026#39;] get_available_gpus()     若想防止未來誤更新，可使用 apt-mark 將套件 hold 住\n1  sudo apt-mark hold nvidia-418 cuda-10-0 libcudnn7 libcudnn7-dev     參考資料  GPU support | TensorFlow python – How to get current available GPUs in tensorflow? – Stack Overflow  ","date":"2019-10-04T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/ubuntu-16.04-cuda-10.0-%E5%AE%89%E8%A3%9D%E7%AD%86%E8%A8%98/","title":"Ubuntu 16.04/CUDA 10.0 安裝筆記"},{"content":" 檢視 XAMPP 的 phpinfo()，確認以下項目  Architecture：x86 / x64 Thread Safety：enabled / disabled Compiler：如 MSVC15 (Visual C++ 2017)   到 PECL Deps 查看對應以上 Architecture 與 Compiler 對應的 ImageMagick 版本  如 ImageMagick-7.0.7-11-vc15-x64.zip 則為 7.0.7   根據以下文章進行安裝，唯各步驟須注意使用上述版本  How to install and enable the Imagick extension in XAMPP for Windows 若第一步驟找不到對應版本的 ImageMagick，可到這裡下載    ","date":"2019-04-23T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/%E5%9C%A8-windows-%E7%9A%84-xampp-%E5%AE%89%E8%A3%9D-imagick-%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6/","title":"在 Windows 的 XAMPP 安裝 Imagick 擴充套件"},{"content":"2019-10-06 更新：\n此篇為舊筆記\n現已不建議使用 pear 安裝，建議直接使用 Composer 安裝全域套件\n1  composer global require \u0026#34;squizlabs/php_codesniffer=*\u0026#34;    使用 XAMPP 時，\n若需安裝 PHP_CodeSniffer，\n一般會使用 PEAR 的安裝方案\n1  pear install PHP_CodeSniffer   但很可能出現以下錯誤\nCannot use result of built-in function in write context in D:\\xampp\\php\\pear\\Archive\\Tar.php on line 639 解決方案：\n 進入檔案，將該行由 1  $v_att_list = \u0026amp; func_get_args();   改為\n1  $v_att_list = func_get_args();    重新安裝 Archive_Tar 1  pear install Archive_Tar    重新安裝 PHP_CodeSniffer pear install PHP_CodeSniffer   ","date":"2019-04-15T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/xampp-%E5%AE%89%E8%A3%9D-php_codesniffer/","title":"XAMPP 安裝 PHP_CodeSniffer"},{"content":"Flyway 是一款資料庫版本控管的解決方案，\n方便接上不同類型的資料庫，也能夠輕易實作遷移機制（Migration）\n自己撰寫的 Spigot 插件正好需要連結資料庫\n原本苦惱於遷移機制的實作，直到發現 Flyway 具備遷移機制，同時又具有 Java API 可以使用\n就決定是這款了！\n這篇主要是要記錄自己踩雷的解決方法，就不推坑傳教了\n有興趣自己去 Google\n 在這次撰寫的 Spigot 插件中，打算暫且先以 SQLite 作為資料庫\n於是先安裝了 Flyway 與 SQLite-JDBC\ncompile 'org.flywaydb:flyway-core:5.2.4' compile 'org.xerial:sqlite-jdbc:3.23.1' 設定 Flyway\n1 2 3 4 5  String configFolder = this.plugin.getDataFolder().getAbsolutePath(); String dbUrl = \u0026#34;jdbc:sqlite:\u0026#34; + configFolder + \u0026#34;/database.db\u0026#34;; Flyway flyway = Flyway.configure().dataSource(dbUrl, null, null).load(); flyway.migrate();   然後他就爆炸了ლ(ﾟдﾟლ)\n 遇到的第一個問題：\nFlywayException: Unable to instantiate class org.flywaydb.core.internal.logging.slf4j.Slf4jLogCreator 解決方案：自行指令 LogCreator\nhttps://github.com/flyway/flyway/issues/506\n1  LogFactory.setLogCreator(new Slf4jLogCreator());   遇到的第二個問題：\nUnable to resolve location classpath:db/migration 解決方案：自行指定 ClassLoader\n1  Flyway flyway = Flyway.configure(getClass().getClassLoader()).dataSource(dbUrl, null, null).load();    就這樣，花了半天解決這些問題\n還不錯用，就是資料難找了點…\n","date":"2018-12-18T00:00:00Z","permalink":"https://blog.jyhsu.tw/p/spigot-%E4%BD%BF%E7%94%A8-flyway-%E8%B8%A9%E9%9B%B7%E5%88%86%E4%BA%AB/","title":"Spigot 使用 Flyway 踩雷分享"}]